//! https://github.com/abulmo/edax-reversi/blob/ce77e7a7da45282799e61871882ecac07b3884aa/src/flip_bmi2.c

use crate::bit::{bextr_u32, pdep_u64, pext_u64};
use crate::square::Square;

#[rustfmt::skip]
const MASK_X:[[u64; 4]; 66] = [
	[ 0x0000000000000001, 0x8040201008040201, 0x0101010101010101, 0x81412111090503ff ],
	[ 0x0000000000000102, 0x0080402010080402, 0x0202020202020202, 0x02824222120a07ff ],
	[ 0x0000000000010204, 0x0000804020100804, 0x0404040404040404, 0x0404844424150eff ],
	[ 0x0000000001020408, 0x0000008040201008, 0x0808080808080808, 0x08080888492a1cff ],
	[ 0x0000000102040810, 0x0000000080402010, 0x1010101010101010, 0x10101011925438ff ],
	[ 0x0000010204081020, 0x0000000000804020, 0x2020202020202020, 0x2020212224a870ff ],
	[ 0x0001020408102040, 0x0000000000008040, 0x4040404040404040, 0x404142444850e0ff ],
	[ 0x0102040810204080, 0x0000000000000080, 0x8080808080808080, 0x8182848890a0c0ff ],
	[ 0x0000000000000102, 0x4020100804020104, 0x0101010101010101, 0x412111090503ff03 ],
	[ 0x0000000000010204, 0x8040201008040201, 0x0202020202020202, 0x824222120a07ff07 ],
	[ 0x0000000001020408, 0x0080402010080402, 0x0404040404040404, 0x04844424150eff0e ],
	[ 0x0000000102040810, 0x0000804020100804, 0x0808080808080808, 0x080888492a1cff1c ],
	[ 0x0000010204081020, 0x0000008040201008, 0x1010101010101010, 0x101011925438ff38 ],
	[ 0x0001020408102040, 0x0000000080402010, 0x2020202020202020, 0x20212224a870ff70 ],
	[ 0x0102040810204080, 0x0000000000804020, 0x4040404040404040, 0x4142444850e0ffe0 ],
	[ 0x0204081020408001, 0x0000000000008040, 0x8080808080808080, 0x82848890a0c0ffc0 ],
	[ 0x0000000000010204, 0x201008040201000a, 0x0101010101010101, 0x2111090503ff0305 ],
	[ 0x0000000001020408, 0x4020100804020101, 0x0202020202020202, 0x4222120a07ff070a ],
	[ 0x0000000102040810, 0x8040201008040201, 0x0404040404040404, 0x844424150eff0e15 ],
	[ 0x0000010204081020, 0x0080402010080402, 0x0808080808080808, 0x0888492a1cff1c2a ],
	[ 0x0001020408102040, 0x0000804020100804, 0x1010101010101010, 0x1011925438ff3854 ],
	[ 0x0102040810204080, 0x0000008040201008, 0x2020202020202020, 0x212224a870ff70a8 ],
	[ 0x0204081020408001, 0x0000000080402010, 0x4040404040404040, 0x42444850e0ffe050 ],
	[ 0x0408102040800003, 0x0000000000804020, 0x8080808080808080, 0x848890a0c0ffc0a0 ],
	[ 0x0000000001020408, 0x1008040201000016, 0x0101010101010101, 0x11090503ff030509 ],
	[ 0x0000000102040810, 0x2010080402010005, 0x0202020202020202, 0x22120a07ff070a12 ],
	[ 0x0000010204081020, 0x4020100804020101, 0x0404040404040404, 0x4424150eff0e1524 ],
	[ 0x0001020408102040, 0x8040201008040201, 0x0808080808080808, 0x88492a1cff1c2a49 ],
	[ 0x0102040810204080, 0x0080402010080402, 0x1010101010101010, 0x11925438ff385492 ],
	[ 0x0204081020408001, 0x0000804020100804, 0x2020202020202020, 0x2224a870ff70a824 ],
	[ 0x0408102040800003, 0x0000008040201008, 0x4040404040404040, 0x444850e0ffe05048 ],
	[ 0x0810204080000007, 0x0000000080402010, 0x8080808080808080, 0x8890a0c0ffc0a090 ],
	[ 0x0000000102040810, 0x080402010000002e, 0x0101010101010101, 0x090503ff03050911 ],
	[ 0x0000010204081020, 0x100804020100000d, 0x0202020202020202, 0x120a07ff070a1222 ],
	[ 0x0001020408102040, 0x2010080402010003, 0x0404040404040404, 0x24150eff0e152444 ],
	[ 0x0102040810204080, 0x4020100804020101, 0x0808080808080808, 0x492a1cff1c2a4988 ],
	[ 0x0204081020408002, 0x8040201008040201, 0x1010101010101010, 0x925438ff38549211 ],
	[ 0x0408102040800005, 0x0080402010080402, 0x2020202020202020, 0x24a870ff70a82422 ],
	[ 0x081020408000000b, 0x0000804020100804, 0x4040404040404040, 0x4850e0ffe0504844 ],
	[ 0x1020408000000017, 0x0000008040201008, 0x8080808080808080, 0x90a0c0ffc0a09088 ],
	[ 0x0000010204081020, 0x040201000000005e, 0x0101010101010101, 0x0503ff0305091121 ],
	[ 0x0001020408102040, 0x080402010000001d, 0x0202020202020202, 0x0a07ff070a122242 ],
	[ 0x0102040810204080, 0x100804020100000b, 0x0404040404040404, 0x150eff0e15244484 ],
	[ 0x0204081020408001, 0x2010080402010003, 0x0808080808080808, 0x2a1cff1c2a498808 ],
	[ 0x0408102040800003, 0x4020100804020101, 0x1010101010101010, 0x5438ff3854921110 ],
	[ 0x081020408000000e, 0x8040201008040201, 0x2020202020202020, 0xa870ff70a8242221 ],
	[ 0x102040800000001d, 0x0080402010080402, 0x4040404040404040, 0x50e0ffe050484442 ],
	[ 0x204080000000003b, 0x0000804020100804, 0x8080808080808080, 0xa0c0ffc0a0908884 ],
	[ 0x0001020408102040, 0x02010000000000be, 0x0101010101010101, 0x03ff030509112141 ],
	[ 0x0102040810204080, 0x040201000000003d, 0x0202020202020202, 0x07ff070a12224282 ],
	[ 0x0204081020408001, 0x080402010000001b, 0x0404040404040404, 0x0eff0e1524448404 ],
	[ 0x0408102040800003, 0x1008040201000007, 0x0808080808080808, 0x1cff1c2a49880808 ],
	[ 0x0810204080000007, 0x2010080402010003, 0x1010101010101010, 0x38ff385492111010 ],
	[ 0x102040800000000f, 0x4020100804020101, 0x2020202020202020, 0x70ff70a824222120 ],
	[ 0x204080000000003e, 0x8040201008040201, 0x4040404040404040, 0xe0ffe05048444241 ],
	[ 0x408000000000007d, 0x0080402010080402, 0x8080808080808080, 0xc0ffc0a090888482 ],
	[ 0x0102040810204080, 0x010000000000027e, 0x0101010101010101, 0xff03050911214181 ],
	[ 0x0204081020408001, 0x020100000000007d, 0x0202020202020202, 0xff070a1222428202 ],
	[ 0x0408102040800003, 0x040201000000003b, 0x0404040404040404, 0xff0e152444840404 ],
	[ 0x0810204080000007, 0x0804020100000017, 0x0808080808080808, 0xff1c2a4988080808 ],
	[ 0x102040800000000f, 0x1008040201000007, 0x1010101010101010, 0xff38549211101010 ],
	[ 0x204080000000001f, 0x2010080402010003, 0x2020202020202020, 0xff70a82422212020 ],
	[ 0x408000000000003f, 0x4020100804020101, 0x4040404040404040, 0xffe0504844424140 ],
	[ 0x800000000000017e, 0x8040201008040201, 0x8080808080808080, 0xffc0a09088848281 ],
	[ 0, 0, 0, 0 ],	// pass
	[ 0, 0, 0, 0 ]
];

/** outflank array */
#[rustfmt::skip]
const OUTFLANK: [[u8; 64]; 8] = [
	[
		0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
		0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40,
		0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
		0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x80,
	],
	[
		0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x00,
	],
	[
		0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00,
	],
	[
		0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
	],
];

/** flip array */
#[rustfmt::skip]
const FLIPPED: [[u8; 144]; 8] = [
	[
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x18, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x38, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x78, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x16, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x30, 0x36, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x76, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x0e, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x20, 0x2e, 0x2c, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x60, 0x6e, 0x6c, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x1e, 0x1c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x5e, 0x5c, 0x00, 0x58, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x3e, 0x3c, 0x00, 0x38, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
	[
		0x00, 0x7e, 0x7c, 0x00, 0x78, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	],
];

#[inline]
pub fn flip(sq: Square, p: u64, o: u64) -> u64 {
    let mut index: usize;
    let mut flipped: u64;
    let mut mask: u64;
    let sq_index = sq as usize;
    let x = sq_index & 7;
    let mut y = sq_index & 0x38;
    let mut of_index: usize;
    let masked_p = p & MASK_X[sq_index][3];

    of_index = bextr_u32((o >> y) as u32, 1, 6) as usize;
    index = (OUTFLANK[x][of_index] as u64 & (masked_p >> y)) as usize;
    flipped = (FLIPPED[x][index] as u64) << y;

    y >>= 3;
    mask = MASK_X[sq_index][0];
    of_index = bextr_u32(pext_u64(o, mask) as u32, 1, 6) as usize;
    index = (OUTFLANK[y][of_index] as u64 & pext_u64(masked_p, mask)) as usize;
    flipped |= pdep_u64(FLIPPED[y][index] as u64, mask);

    mask = MASK_X[sq_index][1];
    of_index = bextr_u32(pext_u64(o, mask) as u32, 1, 6) as usize;
    index = (OUTFLANK[y][of_index] as u64 & pext_u64(masked_p, mask)) as usize;
    flipped |= pdep_u64(FLIPPED[y][index] as u64, mask);

    mask = MASK_X[sq_index][2];
    of_index = bextr_u32(pext_u64(o, mask) as u32, 1, 6) as usize;
    index = (OUTFLANK[y][of_index] as u64 & pext_u64(masked_p, mask)) as usize;
    flipped |= pdep_u64(FLIPPED[y][index] as u64, mask);

    flipped
}
